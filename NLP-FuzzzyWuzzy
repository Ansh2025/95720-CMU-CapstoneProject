import numpy as np
import fuzzywuzzy
from fuzzywuzzy import fuzz
from fuzzywuzzy import process
from sklearn.cluster import AffinityPropagation

def fuzz_similarity(cust_names):
    similarity_array = np.ones((len(cust_names), (len (cust_names)))) *100 
    for i in range(1,len(cust_names)):
        for j in range(i):
            s1 = fuzz.token_set_ratio(cust_names[i],cust_names [j]) + 0.000000000001
            s2 = fuzz.partial_ratio(cust_names [i], cust_names [j]) + 0.00000000001 
            similarity_array[i][j] = 2*s1*s2 / (s1+s2)
            
    for i in range(len(cust_names)):
        for J in range(i+1, len(cust_names)):
            similarity_array[i][j] = similarity_array[j][i]
    np.fill_diagonal(similarity_array, 100) 
                                             
    return similarity_array


def company_clusters(similarity_array, cust_names, Master_ID, Sample_data, dropForeign=True):
    
    similarity_array = fuzz_similarity(cust_names)
    clusters = AffinityPropagation(affinity='precomputed').fit_predict(similarity_array)
    df_clusters = pd.DataFrame(list(zip(Master_ID, clusters)), columns=[ 'Master ID', 'cluster'])
    df_eval = df_clusters.merge(Sample_data, on='Master ID', how = 'left')
    return df_eval


if __name__ == '__main__':
    cust_names = Sample_data['End User Name']
    Master_ID = Sample_data['Master ID']
    #similarity_array = fuzz_similarity(cust_names)
    df_eval = company_clusters(similarity_array,cust_names,Master_ID,Sample_data)
    display(df_eval)
    
    
 
